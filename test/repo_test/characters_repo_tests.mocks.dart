// Mocks generated by Mockito 5.4.2 from annotations
// in rick_morty_flutter/test/repo_test/characters_repo_tests.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/entities/api_response.dart' as _i2;
import 'package:domain/entities/dm_character.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

import 'characters_repo_tests.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0<T> extends _i1.SmartFake
    implements _i2.ApiResponse<T> {
  _FakeApiResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CharactersRepoTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharactersRepoTest extends _i1.Mock
    implements _i3.CharactersRepoTest {
  MockCharactersRepoTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ApiResponse<_i5.CharacterList>> getRickAndMortyCharacters(
    int? page,
    bool? isLoadMore,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRickAndMortyCharacters,
          [
            page,
            isLoadMore,
          ],
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i5.CharacterList>>.value(
            _FakeApiResponse_0<_i5.CharacterList>(
          this,
          Invocation.method(
            #getRickAndMortyCharacters,
            [
              page,
              isLoadMore,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i5.CharacterList>>);
  @override
  _i4.Future<_i2.ApiResponse<_i5.Character>>? getRickAndMortyCharacter(
          int? id) =>
      (super.noSuchMethod(Invocation.method(
        #getRickAndMortyCharacter,
        [id],
      )) as _i4.Future<_i2.ApiResponse<_i5.Character>>?);
  @override
  _i4.Future<_i2.ApiResponse<void>> updateChar(_i5.Character? character) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChar,
          [character],
        ),
        returnValue:
            _i4.Future<_i2.ApiResponse<void>>.value(_FakeApiResponse_0<void>(
          this,
          Invocation.method(
            #updateChar,
            [character],
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<void>>);
  @override
  _i4.Future<_i2.ApiResponse<_i5.CharacterList>> getFavouriteCharactersList(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavouriteCharactersList,
          [page],
        ),
        returnValue: _i4.Future<_i2.ApiResponse<_i5.CharacterList>>.value(
            _FakeApiResponse_0<_i5.CharacterList>(
          this,
          Invocation.method(
            #getFavouriteCharactersList,
            [page],
          ),
        )),
      ) as _i4.Future<_i2.ApiResponse<_i5.CharacterList>>);
}
